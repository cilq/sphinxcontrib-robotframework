=============================================================================
GSOC2013 Plone: Sphinx-compatible ReStructuredText parser for Robot Framework
=============================================================================

* http://www.google-melange.com/gsoc/org/google/gsoc2013/plone
* http://plone.org/events/summer-of-code/2013/ideas-list


Background
==========

- Plone-developers love doctests for "illustrating" documentation with testable
  code-examples:

  * http://en.wikipedia.org/wiki/Doctest#Example_2:_doctests_embedded_in_a_README.txt_file
  * https://raw.github.com/plone/plone.tiles/master/plone/tiles/tiles.rst

- ReStructuredText is the standard documentation syntax for Python developers:

  * http://docutils.sourceforge.net/docs/user/rst/quickstart.html
  * http://docutils.sourceforge.net/docs/user/rst/quickref.html
  * http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html

- Sphinx is the standard documentation generation tool for Python developers,
  and it's based on ReStructuredText:

  * http://sphinx-doc.org/tutorial.html

- Robot Framework's current ReST-parser is only a wrapper for the HTML-parser
  and requires writing tests as ReST-tables. And writing everything in tables
  is cumbersome in ReST. That's why Robot Framework doesn't really work in
  doctests yet and why we need to work for better ReStructuredText parser for
  it:

  * http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html#restructuredtext-format
  * http://code.google.com/p/robotframework/source/browse/src/robot/parsing/restreader.py


Motivation: Annotated screenshots
=================================

Just think about the possibility to automatically generate properly annotated
and cropped screenshots of your web application into its documentation,
automatically keep those screenshots up to date with the current code (and have
a complete acceptance test suite for you web app once you have written Robot
Framework stories to to create those screenshots).

That's already possible, but it needs better integration into documentation
tools (described later).

- Prerequisites:

  * OSX or Linux (Windows is possible, but a bit more complex)
  * Python 2.7
  * Virtualenv https://pypi.python.org/pypi/virtualenv

1. Create clean virtualenv::

     $ virtualenv -p /usr/bin/python2.7 Plone --no-site-packages

2. Activate it::

     $ source Plone/bin/activate

3. Follow steps described in here:

   * http://datakurre.pandala.org/2013/04/generate-annotated-screenshots-with.html


GSOC2013 Goals
==============

Our goals are to be able to:

1) Embed Robot Framework tests into ReST-formatted documents as testable
   use-case-examples (similarly to traditional doctests).

2) Embed Robot Framework tests into Sphinx-documentation so that those tests
   will be run when the documentation is compiled and screenshots created by
   those tests could then be included into the documentation.


GSOC2013 Tasks
==============

Technically, our goals would require to:

1) Update ReST-parser for Robot Framework.

   The updated parser should run the given document (single file) through
   Docutils' ReST-parser and then all extract contents of all ``.. code::
   robotframework`` directives, probably concatenate them and run them through
   Robot Framework's existing text parser (and return the results).

   If no ``.. code:: robotframework``-directives are found, the parser
   should try to do another run by converting the document into HTML and
   running it through Robot Framework's existing HTML-parser to preserve
   the current behavior.

   This task should result a pull request / patch for robotframework.

2) Implement Sphinx-integration package.

   When the integration package is included into Sphinx configuration, it
   should execute Robot Framework test runner for the currently compiled
   document (single file) so that possible artifacts (usually screenshots
   captured by Selenium2Library, but excluding ``output.xml``, ``report.html``
   and ``log.html``) are saved into the same directory.

   This should make it possible to include screenshots generated by Robot
   Framework tests by simply using the default ``.. image::``-directive.

   This task should result a new ``sphinxcontrib_robotframework``-package.

3) Iterate to enhance the Sphinx-integration package.


Previous work
=============

- Robot Framework already recognizes ``.rst``-filetype and has a dummy
  HTML-parser based ReST parser. This is the parser that should be updated:

  * http://code.google.com/p/robotframework/source/browse/src/robot/parsing/restreader.py

- We can already save screenshots with the given filename using Robot Framework
  and its Selenium2Library (being able to update and embed these screenshots
  while compiling documentation is the reason for Sphinx-integration):

  * http://rtomac.github.io/robotframework-selenium2library/doc/Selenium2Library.html#Capture%20Page%20Screenshot

- We already have a custom Robot Framework library for annotating and cropping
  screenshots when there's jQuery available on the target page (this is a major
  use case for Plone -- to automatically generate all documentation
  screenshots):

  * https://github.com/plone/plone.app.robotframework/blob/master/src/plone/app/robotframework/annotate.robot

- We could already have a separate Robot Framework tests suite, which could be
  run separately to generate screenshots, which could be then imported with
  ``..  image::``-directive and absolute paths into ReST / Sphinx
  -documentation (and this is the part that will be much easier with better
  Robot Framework ReST-parser and Sphinx-integration):

  * http://datakurre.pandala.org/2013/04/generate-annotated-screenshots-with.html


How to get started
==================

1) Create and activate a new Python virtual environment:

   * https://pypi.python.org/pypi/virtualenv

2) Create a new development buildout::

      $ mkdir GSOC2013
      $ cd GSOC2013
      $ curl -O http://downloads.buildout.org/2/bootstrap.py

   With ``buildout.cfg``::

      [buildout]
      parts = pybot

      extensions = mr.developer
      sources = sources
      auto-checkout = robotframework

      [sources]
      robotframework = git https://github.com/datakurre/robotframework rev=2.7.7

      [pybot]
      recipe = zc.recipe.egg
      eggs =
         robotframework
         robotframework-selenium2library
         robotentrypoints
         Pygments
         robotframeworklexer
         docutils

   ::

      $ python bootstrap.py
      $ bin/buildout

3) Create an ``test_example.robot``:

   .. code:: robotframework

      *** Settings ***

      Library  Selenium2Library

      Test Setup  Open browser  about:  browser=firefox
      Test Teardown  Close all browsers

      *** Test Cases ***

      Plone.org is up
         Go to  http://www.plone.org/
         Capture page screenshot  plone-org.png

4) Test running the example (requires Firefox to be installed)::

   $ bin/pybot test_example.robot

5) Dump this document into ``gsoc_readme.rst``.

6) Start working with the parser to make this command run the
   example Start test::

      $ bin/pybot gsoc_readme.rst

   .. image:: plone-org.png
      :alt: This image should be generated by the Robot Framework test above.

7) Create an example ReST-file with multiple ``.. code:: robotframework``
   -parts and figure out, how those should be parsed.

   Probably, only one full suite per a single document should be allowed,
   but it should be possible to split settings, variables, keywords and
   test cases into separate ``.. code:: robotframework``-blocks, like:

   * 1 block for ``*** Settings ***``
   * 1 block for ``*** Variables ***``
   * multiple blocks for ``*** Test Cases ***`` and each block could
     contain one or more test cases
   * multiple blocks for ``*** Keywords  ***`` and each block could
     contain one or more keywords


Getting started on Windows
==========================

See a video: http://www.youtube.com/watch?v=phUmOBwa3u8

0. Install Firefox. (Firefox is the default browser for Selenium
   tests.)

1. Install Python, 2.7.5 is best for this project:
   http://www.python.org/download/releases/2.7.5/

   Later you can install wxPython (as done in the video)
   for playing with RIDE (Robot Framework IDE), but it's not
   required for development.

2. Install Git (this installation is auto-detected
   by PyCharm): http://git-scm.com/download/win

3. Install PyCharm for Python IDE:
   http://www.jetbrains.com/pycharm/

4. At PyCharm Welcome -menu, use *Check out from Version Control*
   to check out your cloned Robot Framework repository from GitHub.

5. Continue to open the cloned respository in PyCharm.
   This is now the root of the PyCharm project repository.

6. Configure PyCharm project interpreter:
   File -> Settings -> Project Interpreter -> Configure Interpreters.

   The Python installation should be auto-detected, but if there's no
   interpreters, add the installed Python (step 1) as a new interpreter.

   Select the interpreter and then create a new Virtual Environment,
   e.g. ``C:\RobotEnv``. Leave *Inherit global site-packages*
   unselected to keep the virtual environment isolated.

7. Install Robot Framework into your virtualenv in development mode
   with the next steps:

   Open ``setup.py`` from Robot Framework and fix line::

      execfile(join(dirname(__file__), 'src', 'robot', 'version.py'))

   to::

      execfile(join('src', 'robot', 'version.py'))

   Open command promp, go to project directory and execute::

       c:\RobotEnv\Scripts\python.exe -c "import setuptools; execfile('setup.py')" develop

8. Use PyCharm interpreter configuration to install also ``docutils`` and
   ``robotframeworklexer`` and ``robotframework-selenium2library``.

9. Write an example Robot Framework test suite and add a new
   ``Run/Debug Configuration`` for running it from the PyCharm.


Extra tasks
===========

- Add option for Sphinx-integration to disable (or enable) test suite
  execution during Sphinx-compilation.

- Optimize the Sphinx-integration to run tests in a single document (=in
  the same test suite) only when some test have been updated since the
  last run.

- Optimize the Sphinx-integration to run only those tests that have been
  run since the last run.


More resources
==============

- About GIT:

  * https://help.github.com/articles/set-up-git
  * http://git-scm.com/book

* About buildout:

  * http://www.buildout.org/install.html

- How to write new ReST-directives:

  * http://docutils.sourceforge.net/docs/howto/rst-directives.html

- How to register custom ReST-directives for Sphinx:

  * http://sphinx-doc.org/extensions.html
  * http://sphinx-doc.org/ext/tutorial.html

- Example Sphinx-integrated ReST-directives and how they are used:

  * https://github.com/datakurre/sphinxcontrib-robotdoc/blob/master/src/sphinxcontrib_robotdoc/__init__.py
  * https://github.com/datakurre/pubsubannouncements/tree/master/docs

- Example on executing Robot Framework tests from code:

  * https://github.com/collective/robotsuite/blob/master/src/robotsuite/__init__.py#L276

